# Place all the behaviors and hooks related to the matching controller here.
# All this logic will automatically be available in application.js.
# You can use CoffeeScript in this file: http://coffeescript.org/

$ ->

  # rblog-content 필드 입력창의 autosize 적용
  $ta = $('.rblog_content textarea')
  $ta.autosize()
  # force a reflow before the class gets applied
  document.body.offsetWidth
  $ta.addClass('textarea-transition')


  $('textarea.wmd-input').each (i, input) ->
    attr = $(input).attr('id').split('wmd-input')[1]
    # converter = new Markdown.Converter()
    converter = new Markdown.getSanitizingConverter()
    Markdown.Extra.init(converter)
    converter.hooks.chain "postConversion", (text) ->
      text.replace /<pre>/g, "<pre class='prettyprint linenums'>"
    help =
      handler: () ->
        window.open('http://daringfireball.net/projects/markdown/syntax')
        return false
      title: "<%= I18n.t('components.markdown_editor.help', default: 'Markdown Editing Help') %>"
    editor = new Markdown.Editor(converter, attr, help)
    editor.hooks.chain "onPreviewRefresh", ->
      prettyPrint()
      return
    editor.run()

  $('.markdown-preview').each (i, input) ->

    # 문서상에 html 태그를 직접 작성할 때 변환 후에는 작동하지 않거나 보이지 않도록 하기 위해서 사용
    converter = new Markdown.getSanitizingConverter()

    # 문서상에 html 태그를 직접 작성할 때 변환 후에도 적용되도록 하기 위햇 사용
    # converter = new Markdown.Converter()

    Markdown.Extra.init(converter)
    converter.hooks.chain "postConversion", (text) ->
      text.replace /<pre>/g, "<pre class='prettyprint linenums'>"
    $(input).html converter.makeHtml($(input).text().trim())
    prettyPrint()